# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Task Run invocation source. This indicates how this task is invoked """
enum InvocationSource {
  MANUAL
  SCHEDULED
}

type LogEventsResponse {
  nextForwardToken: String
  nextBackwardToken: String
  events: [OutputLogEvent!]!
}

type Mutation {
  runTask(
    """
    Task payload. This value must be a valid JSON string. Should not be bigger than 1kB
    """
    payload: String = "{}"

    """Task ID"""
    id: String!
  ): TaskRun!
}

type OutputLogEvent {
  timestamp: Float!
  ingestionTime: Float!
  message: String!
}

type Query {
  """Get a list of tasks"""
  tasks(
    """How many to skip"""
    skip: Int = 0

    """How many to take"""
    take: Int = 10
  ): [Task!]!

  """Get a single task"""
  task(
    """Task unique name"""
    name: String!
  ): Task
  taskRuns(
    """How many to skip"""
    skip: Int = 0

    """How many to take"""
    take: Int = 10

    """Task ID to get TaskRuns for"""
    taskId: String!
  ): [TaskRun!]!
  taskRun(id: String!): TaskRun!
  taskRunLogs(
    """Next token"""
    nextToken: String

    """TaskRun ID"""
    id: String!
  ): LogEventsResponse!
}

type Task {
  id: ID!

  """Task name"""
  name: String!

  """Task file code content"""
  code: String!

  """Path of the task file."""
  timeoutAfter: Float!

  """List of task runs"""
  runs: [TaskRun!]
  schedule: String!
}

type TaskRun {
  id: ID!

  """Start time"""
  startTime: Float!

  """End time"""
  endTime: Float

  """Payload"""
  payload: String!

  """Exit Code"""
  exitCode: Int

  """Exit Signal"""
  exitSignal: String

  """Task associated with this run"""
  task: Task!

  """State of the TaskRun"""
  state: TaskRunState!

  """Invocation Type"""
  invocationSource: InvocationSource!
}

"""State TaskRun is at right now"""
enum TaskRunState {
  RUNNING
  FINISHED
  ERROR
  TIMED_OUT
}
